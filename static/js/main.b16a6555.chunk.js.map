{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["checkWidth","window","innerWidth","colWidth","TagDefs","useState","visible","setVisible","shape","onClick","title","placement","onClose","color","Cell","memo","record","undefined","map","item","final","preliminary","notyet","status","includes","href","text","monthToNum","datestr","replace","sorter","colName","a","b","x","y","App","columns","setColumns","rows","setRows","dateSort","setDateSort","loading","setLoading","fixedCol","setFixedCol","useEffect","fetch","data","json","parsed","addEventListener","tableCols","canFilter","filterTerms","row","flat","filter","value","some","term","filterable","dataIndex","key","width","fixed","render","sortOrder","filters","onFilter","col","i","length","className","disabled","type","sortedRows","sort","expocodeLinks","rowIndex","colIndex","cell","forEach","rec","colLetter","String","fromCharCode","charCodeAt","cellAddress","join","workbook","XLSX","utils","book_new","hydrotable","aoa_to_sheet","Object","entries","address","l","Target","Tooltip","book_append_sheet","not_received_data","cruise","push","not_received","writeFile","downloadXLS","dataSource","size","scroll","reduce","accum","current","sticky","pagination","onChange","order","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"gWAaMA,G,OAAa,WACjB,OAAOC,OAAOC,WAAaC,MAGvBC,EAAU,WAAO,IAAD,EACUC,oBAAS,GADnB,mBACbC,EADa,KACJC,EADI,KAEpB,OACE,qCACE,cAAC,IAAD,CAAQC,MAAM,QAAQC,QAAS,kBAAMF,GAAW,IAAhD,gCACA,cAAC,IAAD,CACEG,MAAM,qBACNC,UAAU,OACVL,QAASA,EACTM,QAAS,kBAAML,GAAW,IAJ5B,SAME,+BACE,6BAAI,cAAC,IAAD,CAAKM,MAAM,QAAX,qBACJ,iKACA,6BAAI,cAAC,IAAD,CAAKA,MAAM,QAAX,2BACJ,6LACA,6BAAI,cAAC,IAAD,CAAKA,MAAM,SAAX,qBACJ,uIACA,6BAAI,cAAC,IAAD,CAAKA,MAAM,SAAX,2BACJ,oIACA,6BAAI,cAAC,IAAD,CAAKA,MAAM,MAAX,sBACJ,sJACA,6BAAI,cAAC,IAAD,CAAKA,MAAM,MAAX,wBACJ,+KA+DJC,EAAOC,gBAAK,YAAkC,IAA/BC,EAA8B,EAA9BA,OACnB,YAAeC,IAAXD,EACK,oCAIFA,EAAOE,KAAI,SAACC,GACjB,IAAIC,EACAC,EACAC,EAUJ,OAToB,OAAhBH,EAAKI,QAAmBJ,EAAKI,OAAOC,SAAS,WAC/CJ,EAAQ,cAAC,IAAD,CAAKP,MAAM,QAAX,uBAEU,OAAhBM,EAAKI,QAAmBJ,EAAKI,OAAOC,SAAS,iBAC/CH,EAAc,cAAC,IAAD,CAAKR,MAAM,SAAX,wBAEI,OAAhBM,EAAKI,QAAmBJ,EAAKI,OAAOC,SAAS,aAC/CF,EAAS,cAAC,IAAD,CAAKT,MAAM,MAAX,2BAEO,OAAdM,EAAKM,KACA,gCAAML,EAAOC,EAAaC,EAA1B,IAAkC,mBAAGG,KAAMN,EAAKM,KAAd,SAAqBN,EAAKO,UAE9D,gCAAMN,EAAOC,EAAaC,EAA1B,IAAmCH,EAAKO,cAInD,SAASC,EAAWC,GAalB,OADAA,GADAA,GADAA,GADAA,GADAA,GADAA,GADAA,GADAA,GADAA,GADAA,GADAA,GADAA,EAAUA,EAAQC,QAAQ,WAAY,OACpBA,QAAQ,WAAY,OACpBA,QAAQ,QAAS,OACjBA,QAAQ,QAAS,OACjBA,QAAQ,MAAO,OACfA,QAAQ,OAAQ,OAChBA,QAAQ,OAAQ,OAChBA,QAAQ,SAAU,OAClBA,QAAQ,YAAa,OACrBA,QAAQ,UAAW,OACnBA,QAAQ,WAAY,OACpBA,QAAQ,WAAY,MAIxC,IAAMC,EAAS,SAACC,GACd,GAAgB,UAAZA,EACF,OAAO,SAACC,EAAQC,GACd,IAAMC,EAAIP,EAAWK,EAAED,GAAS,GAAGL,MAC7BS,EAAIR,EAAWM,EAAEF,GAAS,GAAGL,MACnC,OAAOQ,EAAIC,GAAK,EAAID,EAAIC,EAAI,EAAI,IAyFvBC,MA7Ef,WAAgB,IAAD,EACiB/B,mBAAmB,IADpC,mBACNgC,EADM,KACGC,EADH,OAEWjC,mBAAwC,IAFnD,mBAENkC,EAFM,KAEAC,EAFA,OAGmBnC,mBAAsC,UAHzD,mBAGNoC,EAHM,KAGIC,EAHJ,OAIiBrC,oBAAS,GAJ1B,mBAINsC,EAJM,KAIGC,EAJH,OAKmBvC,mBAASL,KAL5B,mBAKN6C,EALM,KAKIC,EALJ,KAObC,qBAAU,WACR,sBAAC,8BAAAf,EAAA,sEACoBgB,MAAM,+CAD1B,cACOC,EADP,gBAEsBA,EAAKC,OAF3B,OAEOC,EAFP,OAGCb,EAAWa,EAAOd,SAClBG,EAAQW,EAAOZ,MACfK,GAAW,GALZ,0CAAD,KAOC,IACHG,qBAAU,WACR9C,OAAOmD,iBAAiB,UAAU,WAC5BpD,IACF8C,GAAY,GAEZA,GAAY,QAGf,IAEH,IAAMO,EAAYhB,EAAQnB,KAAI,SAACa,GAC7B,IAAIuB,EAlCW,SAACvB,EAAiBQ,GACnC,IAAIgB,EAAc,CAAC,QAAS,cAAe,WAG3C,OAFYhB,EAAKrB,KAAI,SAACsC,GAAD,OAASA,EAAIzB,MAAU0B,OAAOC,QAAO,SAACC,GAAD,YAAqB1C,IAAV0C,KAC/CC,MAAK,SAACD,GAAD,OAAWJ,EAAYK,MAAK,SAAAC,GAAI,OAAqB,OAAjBF,EAAMpC,QAAmBoC,EAAMpC,OAAOC,SAASqC,SA+B5FC,CAAW/B,EAASQ,GACpC,MAAO,CACL7B,MAAOqB,EACPgC,UAAWhC,EACXiC,IAAKjC,EACLkC,MA7LW,IA8LXC,MAAmB,WAAZnC,GAAwBc,EAC/BsB,OAAQ,SAACnD,GAAD,OAAiB,cAACF,EAAD,CAAME,OAAQA,KACvCc,OAAQA,EAAOC,GACfqC,UAAuB,UAAZrC,EAAsBU,OAAWxB,EAC5CoD,QAASf,EAAY,CACnB,CAAE5B,KAAM,WAAYiC,MAAO,SAC3B,CAAEjC,KAAM,YAAaiC,MAAO,eAC5B,CAAEjC,KAAM,eAAgBiC,MAAO,iBAC7B1C,EACJqD,SAAU,SAACX,EAAY3C,GACrB,IAAMuD,EAAMvD,EAAOe,GAEnB,QAAYd,IAARsD,EACF,OAAO,EAGT,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAIE,OAAQD,IAAK,CACnC,IAAIrD,EAAOoD,EAAIC,GACf,GAAoB,OAAhBrD,EAAKI,QAAmBJ,EAAKI,OAAOC,SAASmC,GAC/C,OAAO,EAGX,OAAO,OAKb,OACE,sBAAKe,UAAU,MAAf,UACE,cAAC,IAAD,CAAQC,SAAUhC,EAASiC,KAAK,UAAUpE,MAAM,QAAQC,QAAS,kBAjLnD,SAAC4B,EAAmBE,GACtC,IAAMsC,EAAatC,EAAKuC,KAAKhD,EAAO,UAChCiD,EAA2C,GAEzC9B,EAAO4B,EAAW3D,KAAI,SAACsC,EAAKwB,GAChC,OAAO3C,EAAQnB,KAAI,SAACqD,EAAKU,GACvB,IAAIC,EAAO1B,EAAIe,GACf,QAAatD,IAATiE,EAeJ,OATAA,EAAKC,SAAQ,SAAAC,GACX,GAAIb,EAAI/C,SAAS,aAA4B,OAAb4D,EAAI3D,KAAe,CACjD,IAAI4D,EAAYC,OAAOC,aAAaN,EAAW,IAAIO,WAAW,IAC1DC,EAAW,UAAMJ,GAAN,OAAkBL,EAAW,GAC5CD,EAAcU,GAAeL,EAAI3D,SAIrByD,EAAKhE,KAAI,SAAC+B,GAAD,OAAoBA,EAAKvB,QAAMgE,KAAK,YAI3DC,EAAWC,IAAKC,MAAMC,WACtBC,EAAaH,IAAKC,MAAMG,aAAX,CAAyB3D,GAAzB,mBAAqCY,KAGxDgD,OAAOC,QAAQnB,GAAeI,SAAQ,mCAAEgB,EAAF,KAAW1E,EAAX,YAAqBsE,EAAWI,GAASC,EAAI,CAAEC,OAAQ5E,EAAM6E,QAAS,6BAE5GV,IAAKC,MAAMU,kBAAkBZ,EAAUI,EAAY,cAEnD,IAAIS,EAAqD,GACzD3B,EAAWM,SAAQ,SAAC3B,GAClB,IAAIiD,EAASjD,EAAG,OAAW,GAAG9B,KAC9B,OAAOW,EAAQ8C,SAAQ,SAACZ,GACtB,IAAIW,EAAO1B,EAAIe,QACFtD,IAATiE,GAGJA,EAAKC,SAAQ,SAACC,GACO,OAAfA,EAAI7D,QAAmB6D,EAAI7D,OAAOC,SAAS,YAC7CgF,EAAkBE,KAAK,CAACtB,EAAI1D,KAAgB6C,EAAKkC,aAOzD,IAAME,EAAef,IAAKC,MAAMG,aAAX,CAAyB,CAAC,KAAM,QAAS,WAAzC,OAAuDQ,IAC5EZ,IAAKC,MAAMU,kBAAkBZ,EAAUgB,EAAc,gBAErDf,IAAKgB,UAAUjB,EAAU,mBA4HkDkB,CAAYxE,EAASE,IAA5F,2BACA,cAAC,EAAD,IACA,cAAC,IAAD,CACEI,QAASA,EACTN,QAASgB,EACTyD,WAAYvE,EACZwE,KAAK,QACLC,OAAQ,CAAE9E,EAAGmB,EAAU4D,QAAO,SAACC,EAAOC,GAAR,OAAoBD,EAAQC,EAAQlD,QAAO,IACzEmD,QAAM,EACNC,YAAY,EACZC,SAAU,SAACD,EAAYhD,EAASvC,GAAtB,OAAiCY,EAAaZ,EAAeyF,cC5NhEC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAAS9D,OACP,cAAC,IAAM+D,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b16a6555.chunk.js","sourcesContent":["import React, { useEffect, useState, memo } from 'react';\nimport { Table, Tag, Button, Drawer } from 'antd';\nimport XLSX from \"xlsx\"\nimport 'antd/dist/antd.css';\n\nconst colWidth = 260;\n\ninterface HTRecord {\n  text: string | number | null;\n  href: string | null;\n  status: string | null;\n}\n\nconst checkWidth = () => {\n  return window.innerWidth > colWidth * 2.5;\n}\n\nconst TagDefs = () => {\n  const [visible, setVisible] = useState(false)\n  return (\n    <>\n      <Button shape=\"round\" onClick={() => setVisible(true)}>Status Definitions</Button>\n      <Drawer\n        title=\"Status Definitions\"\n        placement=\"left\"\n        visible={visible}\n        onClose={() => setVisible(false)}\n      >\n        <dl>\n          <dt><Tag color=\"green\">Final</Tag></dt>\n          <dd>Data are received and merged into the dataset or available at the linked location, with no expected updates for this parameter.</dd>\n          <dt><Tag color=\"green\">Preliminary</Tag></dt>\n          <dd>Data are received and merged into the dataset or available at the linked location, with expected updates for this parameter (e.g. post cruise calibration).</dd>\n          <dt><Tag color=\"yellow\">Final</Tag></dt>\n          <dd>Data are received and available as is, with no expected updates. Merging into the dataset is pending.</dd>\n          <dt><Tag color=\"yellow\">Preliminary</Tag></dt>\n          <dd>Data are received and available as is, with expected updates. Merging into the dataset is pending.</dd>\n          <dt><Tag color=\"red\">Funded</Tag></dt>\n          <dd>Samples for this parameter have been collected. Analytical results are expected within the timelines set by GO-SHIP.</dd>\n          <dt><Tag color=\"red\">Unfunded</Tag></dt>\n          <dd>Samples for this parameter have been collected, but no funds are available for analysis. These data are not expected to be received.</dd>\n        </dl>\n      </Drawer>\n    </>\n  )\n}\n\nconst downloadXLS = (columns: string[], rows: Array<{ [key: string]: HTRecord[] }>) => {\n  const sortedRows = rows.sort(sorter(\"Dates\"))\n  let expocodeLinks: { [key: string]: string } = {}\n\n  const data = sortedRows.map((row, rowIndex) => {\n    return columns.map((col, colIndex) => {\n      let cell = row[col]\n      if (cell === undefined) {\n        return undefined\n      }\n\n      // Check if the column we are looking at is the expocode and store a link\n      // Since we need to modify the cell properties, most of this is calculating the cell address in \"excel\" format\n      cell.forEach(rec => {\n        if (col.includes(\"Expocode\") && rec.href !== null) {\n          let colLetter = String.fromCharCode(colIndex + 'A'.charCodeAt(0))\n          let cellAddress = `${colLetter}${rowIndex + 2}`\n          expocodeLinks[cellAddress] = rec.href\n        }\n      })\n\n      let cell_text = cell.map((data: HTRecord) => data.text).join(\"; \")\n      return cell_text\n    })\n  })\n  const workbook = XLSX.utils.book_new()\n  const hydrotable = XLSX.utils.aoa_to_sheet([columns, ...data])\n\n  // Make the expocode cells a link\n  Object.entries(expocodeLinks).forEach(([address, href]) => hydrotable[address].l = { Target: href, Tooltip: \"Goto CCHDO Cruise page\" })\n\n  XLSX.utils.book_append_sheet(workbook, hydrotable, \"Hydrotable\")\n\n  let not_received_data: Array<[string, string, string]> = []\n  sortedRows.forEach((row) => {\n    let cruise = row[\"Cruise\"][0].text\n    return columns.forEach((col) => {\n      let cell = row[col]\n      if (cell === undefined) {\n        return undefined\n      }\n      cell.forEach((rec: HTRecord) => {\n        if (rec.status !== null && rec.status.includes(\"not_yet\")) {\n          not_received_data.push([rec.text as string, col, cruise as string])\n        }\n      })\n    })\n  })\n\n\n  const not_received = XLSX.utils.aoa_to_sheet([[\"PI\", \"Param\", \"Cruise\"], ...not_received_data])\n  XLSX.utils.book_append_sheet(workbook, not_received, \"Not Received\")\n\n  XLSX.writeFile(workbook, \"hydrotable.xlsx\")\n}\n\nconst Cell = memo(({ record }: { record: any }) => {\n  if (record === undefined) {\n    return <div>-</div>\n  }\n\n\n  return record.map((item: HTRecord) => {\n    let final;\n    let preliminary;\n    let notyet;\n    if (item.status !== null && item.status.includes(\"final\")) {\n      final = <Tag color=\"green\">Received</Tag>\n    }\n    if (item.status !== null && item.status.includes(\"preliminary\")) {\n      preliminary = <Tag color=\"yellow\">Submitted</Tag>\n    }\n    if (item.status !== null && item.status.includes(\"not_yet\")) {\n      notyet = <Tag color=\"red\">Not Received</Tag>\n    }\n    if (item.href !== null) {\n      return <div>{final}{preliminary}{notyet} <a href={item.href}>{item.text}</a></div>\n    }\n    return <div>{final}{preliminary}{notyet} {item.text}</div>;\n  })\n})\n\nfunction monthToNum(datestr: string) {\n  datestr = datestr.replace(\"Janurary\", \"01\")\n  datestr = datestr.replace(\"February\", \"02\")\n  datestr = datestr.replace(\"March\", \"03\")\n  datestr = datestr.replace(\"April\", \"04\")\n  datestr = datestr.replace(\"May\", \"05\")\n  datestr = datestr.replace(\"June\", \"06\")\n  datestr = datestr.replace(\"July\", \"07\")\n  datestr = datestr.replace(\"August\", \"08\")\n  datestr = datestr.replace(\"September\", \"09\")\n  datestr = datestr.replace(\"October\", \"10\")\n  datestr = datestr.replace(\"November\", \"11\")\n  datestr = datestr.replace(\"December\", \"12\")\n  return datestr\n}\n\nconst sorter = (colName: string) => {\n  if (colName === \"Dates\") {\n    return (a: any, b: any) => {\n      const x = monthToNum(a[colName][0].text);\n      const y = monthToNum(b[colName][0].text);\n      return x > y ? -1 : x < y ? 1 : 0;\n    }\n  }\n}\n\nconst filterable = (colName: string, rows: Array<{ [key: string]: HTRecord[] }>) => {\n  let filterTerms = [\"final\", \"preliminary\", \"not_yet\"]\n  let cells = rows.map((row) => row[colName]).flat().filter((value) => value !== undefined)\n  let canFilter = cells.some((value) => filterTerms.some(term => value.status !== null && value.status.includes(term)))\n  return canFilter\n}\n\nfunction App() {\n  const [columns, setColumns] = useState<string[]>([]);\n  const [rows, setRows] = useState<Array<{ string: HTRecord[] }>>([])\n  const [dateSort, setDateSort] = useState<\"ascend\" | \"descend\" | null>(\"ascend\")\n  const [loading, setLoading] = useState(true)\n  const [fixedCol, setFixedCol] = useState(checkWidth())\n\n  useEffect(() => {\n    (async () => {\n      const data = await fetch(\"https://hydrotable.cchdo.io/hydrotable/json\")\n      const parsed = await data.json()\n      setColumns(parsed.columns)\n      setRows(parsed.rows)\n      setLoading(false)\n    })()\n  }, []);\n  useEffect(() => {\n    window.addEventListener(\"resize\", () => {\n      if (checkWidth()) {\n        setFixedCol(true)\n      } else {\n        setFixedCol(false)\n      }\n    })\n  }, [])\n\n  const tableCols = columns.map((colName) => {\n    let canFilter = filterable(colName, rows)\n    return {\n      title: colName,\n      dataIndex: colName,\n      key: colName,\n      width: colWidth,\n      fixed: colName === \"Cruise\" && fixedCol,\n      render: (record: any) => <Cell record={record} />,\n      sorter: sorter(colName),\n      sortOrder: colName === \"Dates\" ? dateSort : undefined,\n      filters: canFilter ? [\n        { text: \"Received\", value: \"final\" },\n        { text: \"Submitted\", value: \"preliminary\" },\n        { text: \"Not Received\", value: \"not_yet\" },\n      ] : undefined,\n      onFilter: (value: any, record: any) => {\n        const col = record[colName]\n\n        if (col === undefined) {\n          return false\n        }\n\n        for (let i = 0; i < col.length; i++) {\n          let item = col[i];\n          if (item.status !== null && item.status.includes(value)) {\n            return true\n          }\n        }\n        return false\n      }\n    }\n  })\n\n  return (\n    <div className=\"App\">\n      <Button disabled={loading} type=\"primary\" shape=\"round\" onClick={() => downloadXLS(columns, rows)}>Download XLSX</Button>\n      <TagDefs />\n      <Table\n        loading={loading}\n        columns={tableCols}\n        dataSource={rows}\n        size=\"small\"\n        scroll={{ x: tableCols.reduce((accum, current) => accum + current.width, 0) }}\n        sticky\n        pagination={false}\n        onChange={(pagination, filters, sorter) => setDateSort((sorter as any).order)} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}